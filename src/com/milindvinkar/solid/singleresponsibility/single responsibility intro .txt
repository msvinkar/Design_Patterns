
++ Single Responsibility Principle
 - This principle says that every class should have only one reason to change. So what does it mean ?
     - Imagine a class with name RequestHandler. So ideally the only work it should do is to accept request
     and delegate the work to expected worker.
     - Now lets say your handle method has these steps in it :
        1. accept request parameters
        2. validate request parameters
        3. find necessary worker to delegate request to and calls its method to do the necessary work.
        4. return response it got from the worker method
     - In this case this, there are 3 reasons for this class to change:
        1. request parameters needs to be changed
        2. validation needs to be updated
        3. worker method needs to be changed.
        So we can say that, this class does not follow single responsibility principle.
     - So how to fix this ?
        - Lets say we have 3 classes :
            1. RequestHandler
            2. RequestParamValidator
            3. TaskDelegator
        In this case, if we use RequestParamValidator and TaskDelegator class in requestHandler class
        then RequestHandler class wont change when validation changes or worker method changes.
        In case validation changes RequestParameterValidator class will change.
        And in case worker method changes , TaskDelegator will change.
        So now all these classes have only one reason to change.
        So now we can say 'Single Responsibility Principle' is being followed.

      The idea is to refactored the code to a point that every class has only one thing to do.

